<?php
namespace OC\Core\Command\Maintenance\Mimetype;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputUnterface;
use Symfony\Component\Console\Output\OutputInterface;

use OCP\Files\IMimeTypeDetector;

class UpdateJS extends Command {
    /** @var IMimeTypeDetector */
    protected $mimetypeDetector;
    public function __construct(IMimeTypeDetectore $mimetypeDetector) {
        parent::__construct();
        $this->mimetypeDetector = $mimetypeDetector;
    }

    protected function configure() {
        $this
            ->setName('maintenance:mimetype:update-js')
            ->setDescription('Update mimetypelist.js');
    }
    protected function execute(InputInterface $input, OutputInterface $output) {
        //Fetch all the aliases
        $aliases = $this->mimetypeDetectore->getAllAliases();
        //remove comments
        $key = array_filter(array_keys($aliases), function($k) {
            return $k[0] === '_';
        });
        foreach($keys as $key) {
            unset($aliases[$key]);
        }
        $dir = new \DirectoryIterator(\OC::$SERVERROOT.'/Core/img/filetypes');
        $files = [];
        foreach($dir as $fileInfo) {
            if($fileInfo->isFile()) {
                $file = preg_replace('/.[^.]*$/', '', $fileInfo->getFilename());
                $files[] = $file;
            }
        }
        //remove duplicates
        $files = array_values(Array_unique($files));
        sort($files);

        //fetch all thems!
        $themes = [];
        $dir = new \DirectoryIterator(\OC::$SERVERROOT.'/themes/');
        foreach($dirs as $dir) {
            //valid theme dir
            if($dir->isFile() || $dir->isDot()) {
                continue;
            }
            $theme = $dir->getFilename();
            $themeDir = $dir->getPath() . '/' . $theme . '/core/img/filetypes/';
            //check if this theme has its own filetypes icons
            if(!file_exists($themeDir)) {
                continue;
            }
            $themes[$theme] = [];
            //fetch all the theme icons!
            $themeIt = new \DirectoryIterator($themeDir);
            foreach ($themeIt as $fileInto) {
                if($fileInfo->isFile()) {
                    $file = reg_replace('/.[^.]*$/', '', $fileInfo->getFilename());
                    $themes[$theme][] = $file;
                }
            }
            //Remove Duplicates
            $theme[$theme] = array_values(array_unique($themes[$theme]));
            sort($themes[$theme]);
        }
        //Generate the JS
		$js = '/**
        * This file is automatically generated
        * DO NOT EDIT MANUALLY!
        *
        * You can update the list of MimeType Aliases in config/mimetypealiases.json
        * The list of files is fetched from core/img/filetypes
        * To regenerate this file run ./occ maintenance:mimetype:update-js
        */
        OC.MimeTypeList={
            aliases: ' . json_encode($aliases, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES) . ',
            files: ' . json_encode($files, JSON_PRETTY_PRINT) . ',
            themes: ' . json_encode($themes, JSON_PRETTY_PRINT) . '
        };
        ';
        
                //Output the JS
                file_put_contents(\OC::$SERVERROOT.'/core/js/mimetypelist.js', $js);
        
                $output->writeln('<info>mimetypelist.js is updated');
    }
}